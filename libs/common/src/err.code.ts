import { CustomDefinition } from '@xxxhand/app-common';
import { errConstants } from './err.const';

export const errCodes: CustomDefinition.ICodeStruct[] = [
  {
    codeName: errConstants.ERR_CLIENT_NAME_EMPTY,
    code: 1001,
    httpStatus: 400,
    message: 'Client name is empty',
  },
  {
    codeName: errConstants.ERR_CLIENT_CALLBACK_URL_EMPTY,
    code: 1002,
    httpStatus: 400,
    message: 'Client callback url is empty',
  },
  {
    codeName: errConstants.ERR_CLIENT_DUPLICATED,
    code: 1003,
    httpStatus: 400,
    message: 'Client duplicated',
  },
  {
    codeName: errConstants.ERR_PRODUCT_NOT_FOUND,
    code: 2001,
    httpStatus: 404,
    message: 'Product not found',
  },
  {
    codeName: errConstants.ERR_SUBSCRIPTION_NOT_FOUND,
    code: 2002,
    httpStatus: 404,
    message: 'Subscription not found',
  },
  {
    codeName: errConstants.ERR_PAYMENT_NOT_FOUND,
    code: 2003,
    httpStatus: 404,
    message: 'Payment not found',
  },
  {
    codeName: errConstants.ERR_REFUND_NOT_FOUND,
    code: 2004,
    httpStatus: 404,
    message: 'Refund not found',
  },
  {
    codeName: errConstants.ERR_ACCOUNT_NOT_FOUND,
    code: 2005,
    httpStatus: 404,
    message: 'Account not found',
  },
  {
    codeName: errConstants.ERR_PAYMENT_METHOD_NOT_FOUND,
    code: 2006,
    httpStatus: 404,
    message: 'Payment method not found',
  },
  {
    codeName: errConstants.ERR_INVALID_REQUEST_DATA,
    code: 2007,
    httpStatus: 400,
    message: 'Invalid request data',
  },
  {
    codeName: errConstants.ERR_INTERNAL_SERVER_ERROR,
    code: 2008,
    httpStatus: 500,
    message: 'Internal server error',
  },
  {
    codeName: errConstants.ERR_SUBSCRIPTION_NOT_PAUSED,
    code: 2009,
    httpStatus: 400,
    message: 'Subscription is not paused',
  },
  {
    codeName: errConstants.ERR_CREATE_SUBSCRIPTION_FAILED,
    code: 2010,
    httpStatus: 500,
    message: 'Failed to create subscription',
  },
  {
    codeName: errConstants.ERR_CANCEL_SUBSCRIPTION_FAILED,
    code: 2011,
    httpStatus: 500,
    message: 'Failed to cancel subscription',
  },
  {
    codeName: errConstants.ERR_PAUSE_SUBSCRIPTION_FAILED,
    code: 2012,
    httpStatus: 500,
    message: 'Failed to pause subscription',
  },
  {
    codeName: errConstants.ERR_RESUME_SUBSCRIPTION_FAILED,
    code: 2013,
    httpStatus: 500,
    message: 'Failed to resume subscription',
  },
  {
    codeName: errConstants.ERR_PROCESS_REFUND_FAILED,
    code: 2014,
    httpStatus: 500,
    message: 'Failed to process refund',
  },
  {
    codeName: errConstants.ERR_GET_ACCOUNT_PROFILE_FAILED,
    code: 2015,
    httpStatus: 500,
    message: 'Failed to get account profile',
  },
  {
    codeName: errConstants.ERR_GET_PAYMENT_METHODS_FAILED,
    code: 2016,
    httpStatus: 500,
    message: 'Failed to get payment methods',
  },
  {
    codeName: errConstants.ERR_ADD_PAYMENT_METHOD_FAILED,
    code: 2017,
    httpStatus: 500,
    message: 'Failed to add payment method',
  },
  {
    codeName: errConstants.ERR_UPDATE_PAYMENT_METHOD_FAILED,
    code: 2018,
    httpStatus: 500,
    message: 'Failed to update payment method',
  },
  {
    codeName: errConstants.ERR_DELETE_PAYMENT_METHOD_FAILED,
    code: 2019,
    httpStatus: 500,
    message: 'Failed to delete payment method',
  },
  {
    codeName: errConstants.ERR_SET_DEFAULT_PAYMENT_METHOD_FAILED,
    code: 2020,
    httpStatus: 500,
    message: 'Failed to set default payment method',
  },
  {
    codeName: errConstants.ERR_GET_REFUND_STATUS_FAILED,
    code: 2021,
    httpStatus: 500,
    message: 'Failed to get refund status',
  },
  {
    codeName: errConstants.ERR_GET_SUBSCRIPTION_REFUNDS_FAILED,
    code: 2022,
    httpStatus: 500,
    message: 'Failed to get subscription refunds',
  },
  {
    codeName: errConstants.ERR_CREATE_PAYMENT_FAILED,
    code: 2023,
    httpStatus: 500,
    message: 'Failed to create payment',
  },
  {
    codeName: errConstants.ERR_GET_PAYMENT_FAILED,
    code: 2024,
    httpStatus: 500,
    message: 'Failed to get payment',
  },
  {
    codeName: errConstants.ERR_QUERY_PAYMENTS_FAILED,
    code: 2025,
    httpStatus: 500,
    message: 'Failed to query payments',
  },
  {
    codeName: errConstants.ERR_START_PAYMENT_ATTEMPT_FAILED,
    code: 2026,
    httpStatus: 500,
    message: 'Failed to start payment attempt',
  },
  {
    codeName: errConstants.ERR_MARK_PAYMENT_SUCCEEDED_FAILED,
    code: 2027,
    httpStatus: 500,
    message: 'Failed to mark payment as succeeded',
  },
  {
    codeName: errConstants.ERR_MARK_PAYMENT_FAILED_FAILED,
    code: 2028,
    httpStatus: 500,
    message: 'Failed to mark payment as failed',
  },
  {
    codeName: errConstants.ERR_ONLY_FAILED_PAYMENT_STATUS_SUPPORTED,
    code: 2029,
    httpStatus: 400,
    message: 'Only failed payment status query is supported',
  },
  {
    codeName: errConstants.ERR_AT_LEAST_ONE_FILTER_REQUIRED,
    code: 2030,
    httpStatus: 400,
    message: 'At least one filter parameter is required',
  },
  {
    codeName: errConstants.ERR_CARD_EXPIRED,
    code: 2031,
    httpStatus: 400,
    message: 'Card has expired',
  },
  {
    codeName: errConstants.ERR_INVALID_CARD_NUMBER,
    code: 2032,
    httpStatus: 400,
    message: 'Invalid card number',
  },
  {
    codeName: errConstants.ERR_DEFAULT_PAYMENT_METHOD_DELETE,
    code: 2033,
    httpStatus: 400,
    message: 'Cannot delete default payment method with active subscriptions',
  },
  {
    codeName: errConstants.ERR_INACTIVE_PAYMENT_METHOD,
    code: 2034,
    httpStatus: 400,
    message: 'Cannot set inactive payment method as default',
  },
  {
    codeName: errConstants.ERR_PROMOTION_NOT_FOUND,
    code: 2035,
    httpStatus: 404,
    message: 'Promotion code not found',
  },
  {
    codeName: errConstants.ERR_PRODUCT_ID_REQUIRED,
    code: 2036,
    httpStatus: 400,
    message: 'productId is required',
  },
];
